/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './app/__root'
import { Route as SpacesRouteImport } from './app/spaces'
import { Route as IndexRouteImport } from './app/index'
import { Route as SpacesIndexRouteImport } from './app/spaces.index'
import { Route as SpacesSlugRouteImport } from './app/spaces.$slug'
import { Route as BlogSlugRouteImport } from './app/blog.$slug'
import { ServerRoute as CustomScriptDotjsServerRouteImport } from './app/customScript[.]js'
import { ServerRoute as ApiTrpcSplatServerRouteImport } from './app/api.trpc.$'

const rootServerRouteImport = createServerRootRoute()

const SpacesRoute = SpacesRouteImport.update({
  id: '/spaces',
  path: '/spaces',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const SpacesIndexRoute = SpacesIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => SpacesRoute,
} as any)
const SpacesSlugRoute = SpacesSlugRouteImport.update({
  id: '/$slug',
  path: '/$slug',
  getParentRoute: () => SpacesRoute,
} as any)
const BlogSlugRoute = BlogSlugRouteImport.update({
  id: '/blog/$slug',
  path: '/blog/$slug',
  getParentRoute: () => rootRouteImport,
} as any)
const CustomScriptDotjsServerRoute = CustomScriptDotjsServerRouteImport.update({
  id: '/customScript.js',
  path: '/customScript.js',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiTrpcSplatServerRoute = ApiTrpcSplatServerRouteImport.update({
  id: '/api/trpc/$',
  path: '/api/trpc/$',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/spaces': typeof SpacesRouteWithChildren
  '/blog/$slug': typeof BlogSlugRoute
  '/spaces/$slug': typeof SpacesSlugRoute
  '/spaces/': typeof SpacesIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/blog/$slug': typeof BlogSlugRoute
  '/spaces/$slug': typeof SpacesSlugRoute
  '/spaces': typeof SpacesIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/spaces': typeof SpacesRouteWithChildren
  '/blog/$slug': typeof BlogSlugRoute
  '/spaces/$slug': typeof SpacesSlugRoute
  '/spaces/': typeof SpacesIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/spaces' | '/blog/$slug' | '/spaces/$slug' | '/spaces/'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/blog/$slug' | '/spaces/$slug' | '/spaces'
  id:
    | '__root__'
    | '/'
    | '/spaces'
    | '/blog/$slug'
    | '/spaces/$slug'
    | '/spaces/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  SpacesRoute: typeof SpacesRouteWithChildren
  BlogSlugRoute: typeof BlogSlugRoute
}
export interface FileServerRoutesByFullPath {
  '/customScript.js': typeof CustomScriptDotjsServerRoute
  '/api/trpc/$': typeof ApiTrpcSplatServerRoute
}
export interface FileServerRoutesByTo {
  '/customScript.js': typeof CustomScriptDotjsServerRoute
  '/api/trpc/$': typeof ApiTrpcSplatServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/customScript.js': typeof CustomScriptDotjsServerRoute
  '/api/trpc/$': typeof ApiTrpcSplatServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/customScript.js' | '/api/trpc/$'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/customScript.js' | '/api/trpc/$'
  id: '__root__' | '/customScript.js' | '/api/trpc/$'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  CustomScriptDotjsServerRoute: typeof CustomScriptDotjsServerRoute
  ApiTrpcSplatServerRoute: typeof ApiTrpcSplatServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/spaces': {
      id: '/spaces'
      path: '/spaces'
      fullPath: '/spaces'
      preLoaderRoute: typeof SpacesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/spaces/': {
      id: '/spaces/'
      path: '/'
      fullPath: '/spaces/'
      preLoaderRoute: typeof SpacesIndexRouteImport
      parentRoute: typeof SpacesRoute
    }
    '/spaces/$slug': {
      id: '/spaces/$slug'
      path: '/$slug'
      fullPath: '/spaces/$slug'
      preLoaderRoute: typeof SpacesSlugRouteImport
      parentRoute: typeof SpacesRoute
    }
    '/blog/$slug': {
      id: '/blog/$slug'
      path: '/blog/$slug'
      fullPath: '/blog/$slug'
      preLoaderRoute: typeof BlogSlugRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/customScript.js': {
      id: '/customScript.js'
      path: '/customScript.js'
      fullPath: '/customScript.js'
      preLoaderRoute: typeof CustomScriptDotjsServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/trpc/$': {
      id: '/api/trpc/$'
      path: '/api/trpc/$'
      fullPath: '/api/trpc/$'
      preLoaderRoute: typeof ApiTrpcSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface SpacesRouteChildren {
  SpacesSlugRoute: typeof SpacesSlugRoute
  SpacesIndexRoute: typeof SpacesIndexRoute
}

const SpacesRouteChildren: SpacesRouteChildren = {
  SpacesSlugRoute: SpacesSlugRoute,
  SpacesIndexRoute: SpacesIndexRoute,
}

const SpacesRouteWithChildren =
  SpacesRoute._addFileChildren(SpacesRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  SpacesRoute: SpacesRouteWithChildren,
  BlogSlugRoute: BlogSlugRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  CustomScriptDotjsServerRoute: CustomScriptDotjsServerRoute,
  ApiTrpcSplatServerRoute: ApiTrpcSplatServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
